<Window x:Class="AppliFraisGSB.DoctorWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        xmlns:local="clr-namespace:AppliFraisGSB"
        mc:Ignorable="d"
        Title="DoctorWindow" Height="450" Width="800">
    <Grid>
        <DataGrid Margin="0,10,0,0" ItemsSource="{Binding Items3}" CanUserSortColumns="True" CanUserAddRows="False" AutoGenerateColumns="False"
                          materialDesign:DataGridAssist.CellPadding="13 8 8 8" materialDesign:DataGridAssist.ColumnHeaderPadding="8" SelectionChanged="DataGrid_SelectionChanged">
            <DataGrid.Columns>
                <DataGridCheckBoxColumn Binding="{Binding IsSelected}" 
                                            ElementStyle="{StaticResource MaterialDesignDataGridCheckBoxColumnStyle}"
                                            EditingElementStyle="{StaticResource MaterialDesignDataGridCheckBoxColumnEditingStyle}">
                    <DataGridCheckBoxColumn.Header>
                        <!--padding to allow hit test to pass thru for sorting -->
                        <Border Background="Transparent" Padding="6 0 6 0" HorizontalAlignment="Center">
                            <CheckBox HorizontalAlignment="Center"
                                          DataContext="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=DataContext}"
                                          IsChecked="{Binding IsAllItems3Selected}" />
                        </Border>
                    </DataGridCheckBoxColumn.Header>
                </DataGridCheckBoxColumn>
                <DataGridTextColumn Binding="{Binding Code}"
                                        Header="Code"
                                        EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}" />
                <!-- if you want to use the pop up style (MaterialDesignDataGridTextColumnPopupEditingStyle), you must use MaterialDataGridTextColumn -->
                <materialDesign:MaterialDataGridTextColumn Binding="{Binding Name}"
                                                               Header="Name"
                                                               EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnPopupEditingStyle}" 
                                                               />
                <!-- set a max length to get an indicator in the editor -->
                <materialDesign:MaterialDataGridTextColumn Binding="{Binding Description}"
                                                               Header="Description"
                                                               MaxLength="255" 
                                                               EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnPopupEditingStyle}"  />
                <materialDesign:MaterialDataGridTextColumn Binding="{Binding Numeric}"
                                                        Header="Number with long header"
                                                        Width="120"
                                                        EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnPopupEditingStyle}">
                    <DataGridTextColumn.HeaderStyle>
                        <Style TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource MaterialDesignDataGridColumnHeader}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                            <Setter Property="ContentTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <TextBlock TextWrapping="Wrap" Text="{Binding}" TextAlignment="Right"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </DataGridTextColumn.HeaderStyle>
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="{x:Type TextBlock}">
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </materialDesign:MaterialDataGridTextColumn>

                <!-- use custom combo box column to get better combos. Use ItemsSourceBinding as your binding template to be applied to each combo -->
                <materialDesign:MaterialDataGridComboBoxColumn Header="Food"
                                                                   SelectedValueBinding="{Binding Food}"
                                                                   ItemsSourceBinding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}, Path=DataContext.Foods}" />
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</Window>
